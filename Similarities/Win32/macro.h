///////////////////////////////////////////////////////////////////////////////////

#ifndef __WIN32__MACRO__
#define __WIN32__MACRO__

///////////////////////////////////////////////////////////////////////////////////

#pragma once

///////////////////////////////////////////////////////////////////////////////////

#ifndef _WINDOWS_
	#error #include <windows.h>
#endif

///////////////////////////////////////////////////////////////////////////////////

#define msgstr( str ) \
	#str

#define msgstr2( str ) \
	msgstr( str )

#define remind( str ) \
	message( __FILE__ "(" msgstr2( __LINE__ ) ") : " #str )

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

#define DEBUG_BREAK \
	if( ::IsDebuggerPresent() ) ::DebugBreak

///////////////////////////////////////////////////////////////////////////////////

#define WIN32_SUCCEEDED( dw ) \
	( ERROR_SUCCESS == ( dw ) )

#define WIN32_FAILED( dw ) \
	( ERROR_SUCCESS != ( dw ) )

///////////////////////////////////////////////////////////////////////////////////

#if defined( ASSERT )
	#undef ASSERT
#endif

#ifndef NDEBUG
	#define ASSERT( br ) \
		if( !( br ) ) DEBUG_BREAK()

	#define ASSERT_WIN32( dw ) \
		if( WIN32_FAILED( dw ) ) DEBUG_BREAK()

	#define ASSERT_SUCCEEDED( hr ) \
		if( FAILED( hr ) ) DEBUG_BREAK()
#else
	#define ASSERT( br ) \
		UNREFERENCED_PARAMETER( br )

	#define ASSERT_WIN32( dw ) \
		UNREFERENCED_PARAMETER( dw )

	#define ASSERT_SUCCEEDED( hr ) \
		UNREFERENCED_PARAMETER( hr )
#endif

#define REPLACE_IF_FAILED( hr, hr2 ) \
	if( FAILED( hr2 ) && SUCCEEDED( hr ) ) hr = hr2

#define REPLACE_IF_NOT_OK( hr, hr2 ) \
	if( ( S_OK != hr2 ) && ( S_OK == hr ) ) hr = hr2

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

#define IS_NULL( p ) \
	( NULL == p )

#define IS_NOT_NULL( p ) \
	( NULL != p )

#define IS_BAD_READ( p, size ) \
	::IsBadReadPtr( p, size )

#define IS_BAD_WRITE( p, size ) \
	::IsBadWritePtr( p, size )

#define IS_BAD_CODE( p ) \
	::IsBadCodePtr( reinterpret_cast< FARPROC >( p ) )

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

#define MAKE_HRESULT_WIN32_FAILED( dw ) \
	MAKE_HRESULT( SEVERITY_ERROR, FACILITY_WIN32, ( dw ) )

#define MAKE_HRESULT_WIN32_SUCCEEDED( dw ) \
	MAKE_HRESULT( SEVERITY_SUCCESS, FACILITY_WIN32, ( dw ) )

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

namespace Win32
{

	///////////////////////////////////////////////////////////////////////////////

	inline
	HRESULT
	GetLastError()
	{
		DWORD dw = ::GetLastError();

		return WIN32_FAILED( dw ) ? HRESULT_FROM_WIN32( dw ) : E_UNEXPECTED;
	}

	///////////////////////////////////////////////////////////////////////////////

	inline
	LONGLONG
	SystemTime()
	{
		FILETIME ftSystemTime;

		::GetSystemTimeAsFileTime( &ftSystemTime );

		return ( static_cast< LONGLONG >( ftSystemTime.dwHighDateTime ) << 32 ) | ftSystemTime.dwLowDateTime;
	}

	///////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

bool
STDMETHODCALLTYPE
bHaveSSE2();

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

#endif

///////////////////////////////////////////////////////////////////////////////////